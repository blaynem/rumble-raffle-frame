"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@resvg";
exports.ids = ["vendor-chunks/@resvg"];
exports.modules = {

/***/ "(rsc)/./node_modules/@resvg/resvg-wasm/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@resvg/resvg-wasm/index.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Resvg: () => (/* binding */ Resvg2),\n/* harmony export */   initWasm: () => (/* binding */ initWasm)\n/* harmony export */ });\n// wasm/dist/index.js\nvar wasm;\nvar heap = new Array(128).fill(void 0);\nheap.push(void 0, null, true, false);\nvar heap_next = heap.length;\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nfunction getObject(idx) {\n    return heap[idx];\n}\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nvar WASM_VECTOR_LEN = 0;\nvar cachedUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\nvar cachedTextEncoder = new TextEncoder(\"utf-8\");\nvar encodeString = typeof cachedTextEncoder.encodeInto === \"function\" ? function(arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n} : function(arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === void 0) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr2 = malloc(buf.length);\n        getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr2;\n    }\n    let len = arg.length;\n    let ptr = malloc(len);\n    const mem = getUint8Memory0();\n    let offset = 0;\n    for(; offset < len; offset++){\n        const code = arg.charCodeAt(offset);\n        if (code > 127) break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nfunction isLikeNone(x) {\n    return x === void 0 || x === null;\n}\nvar cachedInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\nvar cachedTextDecoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true\n});\ncachedTextDecoder.decode();\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\nvar BBox = class {\n    static __wrap(ptr) {\n        const obj = Object.create(BBox.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bbox_free(ptr);\n    }\n    /**\n  * @returns {number}\n  */ get x() {\n        const ret = wasm.__wbg_get_bbox_x(this.ptr);\n        return ret;\n    }\n    /**\n  * @param {number} arg0\n  */ set x(arg0) {\n        wasm.__wbg_set_bbox_x(this.ptr, arg0);\n    }\n    /**\n  * @returns {number}\n  */ get y() {\n        const ret = wasm.__wbg_get_bbox_y(this.ptr);\n        return ret;\n    }\n    /**\n  * @param {number} arg0\n  */ set y(arg0) {\n        wasm.__wbg_set_bbox_y(this.ptr, arg0);\n    }\n    /**\n  * @returns {number}\n  */ get width() {\n        const ret = wasm.__wbg_get_bbox_width(this.ptr);\n        return ret;\n    }\n    /**\n  * @param {number} arg0\n  */ set width(arg0) {\n        wasm.__wbg_set_bbox_width(this.ptr, arg0);\n    }\n    /**\n  * @returns {number}\n  */ get height() {\n        const ret = wasm.__wbg_get_bbox_height(this.ptr);\n        return ret;\n    }\n    /**\n  * @param {number} arg0\n  */ set height(arg0) {\n        wasm.__wbg_set_bbox_height(this.ptr, arg0);\n    }\n};\nvar RenderedImage = class {\n    static __wrap(ptr) {\n        const obj = Object.create(RenderedImage.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_renderedimage_free(ptr);\n    }\n    /**\n  * Get the PNG width\n  * @returns {number}\n  */ get width() {\n        const ret = wasm.renderedimage_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n  * Get the PNG height\n  * @returns {number}\n  */ get height() {\n        const ret = wasm.renderedimage_height(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n  * Write the image data to Uint8Array\n  * @returns {Uint8Array}\n  */ asPng() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.renderedimage_asPng(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n  * Get the RGBA pixels of the image\n  * @returns {Uint8Array}\n  */ get pixels() {\n        const ret = wasm.renderedimage_pixels(this.ptr);\n        return takeObject(ret);\n    }\n};\nvar Resvg = class {\n    static __wrap(ptr) {\n        const obj = Object.create(Resvg.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_resvg_free(ptr);\n    }\n    /**\n  * @param {Uint8Array | string} svg\n  * @param {string | undefined} options\n  */ constructor(svg, options){\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(options) ? 0 : passStringToWasm0(options, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.resvg_new(retptr, addHeapObject(svg), ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Resvg.__wrap(r0);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n  * Get the SVG width\n  * @returns {number}\n  */ get width() {\n        const ret = wasm.resvg_width(this.ptr);\n        return ret;\n    }\n    /**\n  * Get the SVG height\n  * @returns {number}\n  */ get height() {\n        const ret = wasm.resvg_height(this.ptr);\n        return ret;\n    }\n    /**\n  * Renders an SVG in Wasm\n  * @returns {RenderedImage}\n  */ render() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resvg_render(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RenderedImage.__wrap(r0);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n  * Output usvg-simplified SVG string\n  * @returns {string}\n  */ toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resvg_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n  * Calculate a maximum bounding box of all visible elements in this SVG.\n  *\n  * Note: path bounding box are approx values.\n  * @returns {BBox | undefined}\n  */ innerBBox() {\n        const ret = wasm.resvg_innerBBox(this.ptr);\n        return ret === 0 ? void 0 : BBox.__wrap(ret);\n    }\n    /**\n  * Calculate a maximum bounding box of all visible elements in this SVG.\n  * This will first apply transform.\n  * Similar to `SVGGraphicsElement.getBBox()` DOM API.\n  * @returns {BBox | undefined}\n  */ getBBox() {\n        const ret = wasm.resvg_getBBox(this.ptr);\n        return ret === 0 ? void 0 : BBox.__wrap(ret);\n    }\n    /**\n  * Use a given `BBox` to crop the svg. Currently this method simply changes\n  * the viewbox/size of the svg and do not move the elements for simplicity\n  * @param {BBox} bbox\n  */ cropByBBox(bbox) {\n        _assertClass(bbox, BBox);\n        wasm.resvg_cropByBBox(this.ptr, bbox.ptr);\n    }\n    /**\n  * @returns {Array<any>}\n  */ imagesToResolve() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resvg_imagesToResolve(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n  * @param {string} href\n  * @param {Uint8Array} buffer\n  */ resolveImage(href, buffer) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(href, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.resvg_resolveImage(retptr, this.ptr, ptr0, len0, addHeapObject(buffer));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n};\nasync function load(module, imports) {\n    if (typeof Response === \"function\" && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === \"function\") {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n            } catch (e) {\n                if (module.headers.get(\"Content-Type\") != \"application/wasm\") {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                } else {\n                    throw e;\n                }\n            }\n        }\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n        if (instance instanceof WebAssembly.Instance) {\n            return {\n                instance,\n                module\n            };\n        } else {\n            return instance;\n        }\n    }\n}\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_new_15d3966e9981a196 = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_cf65c07de34b9a08 = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_9fb2f11355ecadf5 = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_537b7341ce90bb31 = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_instanceof_Uint8Array_01cebe79ca606cca = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Uint8Array;\n        } catch (e) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof obj === \"string\" ? obj : void 0;\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_new_b525de17f44a8943 = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_49c286f04dd3bf59 = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_length_27a2afe8ab42b09f = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_set_17499e8aa4003ebd = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    return imports;\n}\nfunction initMemory(imports, maybe_memory) {}\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n    return wasm;\n}\nasync function init(input) {\n    if (typeof input === \"undefined\") {\n        input = new URL(\"index_bg.wasm\", void 0);\n    }\n    const imports = getImports();\n    if (typeof input === \"string\" || typeof Request === \"function\" && input instanceof Request || typeof URL === \"function\" && input instanceof URL) {\n        input = fetch(input);\n    }\n    initMemory(imports);\n    const { instance, module } = await load(await input, imports);\n    return finalizeInit(instance, module);\n}\nvar dist_default = init;\n// wasm-binding.ts\nvar initialized = false;\nvar initWasm = async (module_or_path)=>{\n    if (initialized) {\n        throw new Error(\"Already initialized. The `initWasm()` function can be used only once.\");\n    }\n    await dist_default(await module_or_path);\n    initialized = true;\n};\nvar Resvg2 = class extends Resvg {\n    /**\n   * @param {Uint8Array | string} svg\n   * @param {ResvgRenderOptions | undefined} options\n   */ constructor(svg, options){\n        if (!initialized) throw new Error(\"Wasm has not been initialized. Call `initWasm()` function.\");\n        super(svg, JSON.stringify(options));\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@resvg/resvg-wasm/index.mjs\n");

/***/ })

};
;