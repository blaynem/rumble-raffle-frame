"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/valibot";
exports.ids = ["vendor-chunks/valibot"];
exports.modules = {

/***/ "(rsc)/./node_modules/valibot/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/valibot/dist/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValiError: () => (/* binding */ ValiError),\n/* harmony export */   any: () => (/* binding */ any),\n/* harmony export */   anyAsync: () => (/* binding */ anyAsync),\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   arrayAsync: () => (/* binding */ arrayAsync),\n/* harmony export */   bigint: () => (/* binding */ bigint),\n/* harmony export */   bigintAsync: () => (/* binding */ bigintAsync),\n/* harmony export */   blob: () => (/* binding */ blob),\n/* harmony export */   blobAsync: () => (/* binding */ blobAsync),\n/* harmony export */   boolean: () => (/* binding */ boolean),\n/* harmony export */   booleanAsync: () => (/* binding */ booleanAsync),\n/* harmony export */   brand: () => (/* binding */ brand),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   coerceAsync: () => (/* binding */ coerceAsync),\n/* harmony export */   custom: () => (/* binding */ custom),\n/* harmony export */   customAsync: () => (/* binding */ customAsync),\n/* harmony export */   date: () => (/* binding */ date),\n/* harmony export */   dateAsync: () => (/* binding */ dateAsync),\n/* harmony export */   email: () => (/* binding */ email),\n/* harmony export */   emoji: () => (/* binding */ emoji),\n/* harmony export */   endsWith: () => (/* binding */ endsWith),\n/* harmony export */   enumType: () => (/* binding */ enumType),\n/* harmony export */   enumTypeAsync: () => (/* binding */ enumTypeAsync),\n/* harmony export */   equal: () => (/* binding */ equal),\n/* harmony export */   excludes: () => (/* binding */ excludes),\n/* harmony export */   executePipe: () => (/* binding */ executePipe),\n/* harmony export */   executePipeAsync: () => (/* binding */ executePipeAsync),\n/* harmony export */   fallback: () => (/* binding */ fallback),\n/* harmony export */   fallbackAsync: () => (/* binding */ fallbackAsync),\n/* harmony export */   finite: () => (/* binding */ finite),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   getDefaultArgs: () => (/* binding */ getDefaultArgs),\n/* harmony export */   getIssues: () => (/* binding */ getIssues),\n/* harmony export */   imei: () => (/* binding */ imei),\n/* harmony export */   includes: () => (/* binding */ includes),\n/* harmony export */   instance: () => (/* binding */ instance),\n/* harmony export */   instanceAsync: () => (/* binding */ instanceAsync),\n/* harmony export */   integer: () => (/* binding */ integer),\n/* harmony export */   ip: () => (/* binding */ ip),\n/* harmony export */   ipv4: () => (/* binding */ ipv4),\n/* harmony export */   ipv6: () => (/* binding */ ipv6),\n/* harmony export */   is: () => (/* binding */ is),\n/* harmony export */   isLuhnAlgo: () => (/* binding */ isLuhnAlgo),\n/* harmony export */   isoDate: () => (/* binding */ isoDate),\n/* harmony export */   isoDateTime: () => (/* binding */ isoDateTime),\n/* harmony export */   isoTime: () => (/* binding */ isoTime),\n/* harmony export */   isoTimeSecond: () => (/* binding */ isoTimeSecond),\n/* harmony export */   isoTimestamp: () => (/* binding */ isoTimestamp),\n/* harmony export */   isoWeek: () => (/* binding */ isoWeek),\n/* harmony export */   keyof: () => (/* binding */ keyof),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   literal: () => (/* binding */ literal),\n/* harmony export */   literalAsync: () => (/* binding */ literalAsync),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapAsync: () => (/* binding */ mapAsync),\n/* harmony export */   maxBytes: () => (/* binding */ maxBytes),\n/* harmony export */   maxLength: () => (/* binding */ maxLength),\n/* harmony export */   maxRange: () => (/* binding */ maxRange),\n/* harmony export */   maxSize: () => (/* binding */ maxSize),\n/* harmony export */   maxValue: () => (/* binding */ maxValue),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   mergeAsync: () => (/* binding */ mergeAsync),\n/* harmony export */   mimeType: () => (/* binding */ mimeType),\n/* harmony export */   minBytes: () => (/* binding */ minBytes),\n/* harmony export */   minLength: () => (/* binding */ minLength),\n/* harmony export */   minRange: () => (/* binding */ minRange),\n/* harmony export */   minSize: () => (/* binding */ minSize),\n/* harmony export */   minValue: () => (/* binding */ minValue),\n/* harmony export */   multipleOf: () => (/* binding */ multipleOf),\n/* harmony export */   nan: () => (/* binding */ nan),\n/* harmony export */   nanAsync: () => (/* binding */ nanAsync),\n/* harmony export */   nativeEnum: () => (/* binding */ nativeEnum),\n/* harmony export */   nativeEnumAsync: () => (/* binding */ nativeEnumAsync),\n/* harmony export */   never: () => (/* binding */ never),\n/* harmony export */   neverAsync: () => (/* binding */ neverAsync),\n/* harmony export */   nonNullable: () => (/* binding */ nonNullable),\n/* harmony export */   nonNullableAsync: () => (/* binding */ nonNullableAsync),\n/* harmony export */   nonNullish: () => (/* binding */ nonNullish),\n/* harmony export */   nonNullishAsync: () => (/* binding */ nonNullishAsync),\n/* harmony export */   nonOptional: () => (/* binding */ nonOptional),\n/* harmony export */   nonOptionalAsync: () => (/* binding */ nonOptionalAsync),\n/* harmony export */   nullType: () => (/* binding */ nullType),\n/* harmony export */   nullTypeAsync: () => (/* binding */ nullTypeAsync),\n/* harmony export */   nullable: () => (/* binding */ nullable),\n/* harmony export */   nullableAsync: () => (/* binding */ nullableAsync),\n/* harmony export */   nullish: () => (/* binding */ nullish),\n/* harmony export */   nullishAsync: () => (/* binding */ nullishAsync),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   numberAsync: () => (/* binding */ numberAsync),\n/* harmony export */   object: () => (/* binding */ object),\n/* harmony export */   objectAsync: () => (/* binding */ objectAsync),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   omitAsync: () => (/* binding */ omitAsync),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   optionalAsync: () => (/* binding */ optionalAsync),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseAsync: () => (/* binding */ parseAsync),\n/* harmony export */   partial: () => (/* binding */ partial),\n/* harmony export */   partialAsync: () => (/* binding */ partialAsync),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   pickAsync: () => (/* binding */ pickAsync),\n/* harmony export */   record: () => (/* binding */ record),\n/* harmony export */   recordAsync: () => (/* binding */ recordAsync),\n/* harmony export */   recursive: () => (/* binding */ recursive),\n/* harmony export */   recursiveAsync: () => (/* binding */ recursiveAsync),\n/* harmony export */   regex: () => (/* binding */ regex),\n/* harmony export */   required: () => (/* binding */ required),\n/* harmony export */   requiredAsync: () => (/* binding */ requiredAsync),\n/* harmony export */   safeInteger: () => (/* binding */ safeInteger),\n/* harmony export */   safeParse: () => (/* binding */ safeParse),\n/* harmony export */   safeParseAsync: () => (/* binding */ safeParseAsync),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setAsync: () => (/* binding */ setAsync),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   special: () => (/* binding */ special),\n/* harmony export */   specialAsync: () => (/* binding */ specialAsync),\n/* harmony export */   startsWith: () => (/* binding */ startsWith),\n/* harmony export */   strict: () => (/* binding */ strict),\n/* harmony export */   strictAsync: () => (/* binding */ strictAsync),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   stringAsync: () => (/* binding */ stringAsync),\n/* harmony export */   symbol: () => (/* binding */ symbol2),\n/* harmony export */   symbolAsync: () => (/* binding */ symbolAsync),\n/* harmony export */   toCustom: () => (/* binding */ toCustom),\n/* harmony export */   toCustomAsync: () => (/* binding */ toCustomAsync),\n/* harmony export */   toLowerCase: () => (/* binding */ toLowerCase),\n/* harmony export */   toMaxValue: () => (/* binding */ toMaxValue),\n/* harmony export */   toMinValue: () => (/* binding */ toMinValue),\n/* harmony export */   toTrimmed: () => (/* binding */ toTrimmed),\n/* harmony export */   toTrimmedEnd: () => (/* binding */ toTrimmedEnd),\n/* harmony export */   toTrimmedStart: () => (/* binding */ toTrimmedStart),\n/* harmony export */   toUpperCase: () => (/* binding */ toUpperCase),\n/* harmony export */   transform: () => (/* binding */ transform),\n/* harmony export */   transformAsync: () => (/* binding */ transformAsync),\n/* harmony export */   tuple: () => (/* binding */ tuple),\n/* harmony export */   tupleAsync: () => (/* binding */ tupleAsync),\n/* harmony export */   undefinedType: () => (/* binding */ undefinedType),\n/* harmony export */   undefinedTypeAsync: () => (/* binding */ undefinedTypeAsync),\n/* harmony export */   union: () => (/* binding */ union),\n/* harmony export */   unionAsync: () => (/* binding */ unionAsync),\n/* harmony export */   unknown: () => (/* binding */ unknown),\n/* harmony export */   unknownAsync: () => (/* binding */ unknownAsync),\n/* harmony export */   unwrap: () => (/* binding */ unwrap),\n/* harmony export */   url: () => (/* binding */ url),\n/* harmony export */   useDefault: () => (/* binding */ useDefault),\n/* harmony export */   uuid: () => (/* binding */ uuid),\n/* harmony export */   value: () => (/* binding */ value),\n/* harmony export */   voidType: () => (/* binding */ voidType),\n/* harmony export */   voidTypeAsync: () => (/* binding */ voidTypeAsync),\n/* harmony export */   withDefault: () => (/* binding */ withDefault)\n/* harmony export */ });\n// src/error/flatten/flatten.ts\nfunction flatten(arg1) {\n    return (Array.isArray(arg1) ? arg1 : arg1.issues).reduce((flatErrors, issue)=>{\n        if (issue.path) {\n            const path = issue.path.map(({ key })=>key).join(\".\");\n            flatErrors.nested[path] = [\n                ...flatErrors.nested[path] || [],\n                issue.message\n            ];\n        } else {\n            flatErrors.root = [\n                ...flatErrors.root || [],\n                issue.message\n            ];\n        }\n        return flatErrors;\n    }, {\n        nested: {}\n    });\n}\n// src/error/ValiError/ValiError.ts\nvar ValiError = class extends Error {\n    /**\n   * Creates a Valibot error with useful information.\n   *\n   * @param issues The error issues.\n   */ constructor(issues){\n        super(issues[0].message);\n        this.name = \"ValiError\";\n        this.issues = issues;\n    }\n};\n// src/methods/brand/brand.ts\nvar symbol = Symbol(\"brand\");\nfunction brand(schema, name) {\n    return schema;\n}\n// src/methods/coerce/coerce.ts\nfunction coerce(schema, action) {\n    return {\n        ...schema,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            return schema._parse(action(input), info);\n        }\n    };\n}\n// src/methods/coerce/coerceAsync.ts\nfunction coerceAsync(schema, action) {\n    return {\n        ...schema,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            return schema._parse(await action(input), info);\n        }\n    };\n}\n// src/methods/fallback/fallback.ts\nfunction fallback(schema, value2) {\n    return {\n        ...schema,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            const result = schema._parse(input, info);\n            return {\n                output: result.issues ? typeof value2 === \"function\" ? value2({\n                    input,\n                    issues: result.issues\n                }) : value2 : result.output\n            };\n        }\n    };\n}\n// src/methods/fallback/fallbackAsync.ts\nfunction fallbackAsync(schema, value2) {\n    return {\n        ...schema,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            const result = await schema._parse(input, info);\n            return {\n                output: result.issues ? typeof value2 === \"function\" ? value2({\n                    input,\n                    issues: result.issues\n                }) : value2 : result.output\n            };\n        }\n    };\n}\n// src/methods/is/is.ts\nfunction is(schema, input) {\n    return !schema._parse(input, {\n        abortEarly: true\n    }).issues;\n}\n// src/utils/executePipe/utils/getIssue/getIssue.ts\nfunction getIssue(info, issue) {\n    return {\n        reason: info?.reason,\n        validation: issue.validation,\n        origin: info?.origin || \"value\",\n        message: issue.message,\n        input: issue.input,\n        abortEarly: info?.abortEarly,\n        abortPipeEarly: info?.abortPipeEarly\n    };\n}\n// src/utils/executePipe/utils/getPipeInfo/getPipeInfo.ts\nfunction getPipeInfo(info, reason) {\n    return {\n        reason,\n        origin: info?.origin,\n        abortEarly: info?.abortEarly,\n        abortPipeEarly: info?.abortPipeEarly\n    };\n}\n// src/utils/executePipe/executePipe.ts\nfunction executePipe(input, pipe, parseInfo, reason) {\n    if (!pipe || !pipe.length) {\n        return {\n            output: input\n        };\n    }\n    let pipeInfo;\n    let issues;\n    let output = input;\n    for (const action of pipe){\n        const result = action(output);\n        if (result.issue) {\n            pipeInfo = pipeInfo || getPipeInfo(parseInfo, reason);\n            const issue = getIssue(pipeInfo, result.issue);\n            issues ? issues.push(issue) : issues = [\n                issue\n            ];\n            if (pipeInfo.abortEarly || pipeInfo.abortPipeEarly) {\n                break;\n            }\n        } else {\n            output = result.output;\n        }\n    }\n    return issues ? {\n        issues\n    } : {\n        output\n    };\n}\n// src/utils/executePipe/executePipeAsync.ts\nasync function executePipeAsync(input, pipe, parseInfo, reason) {\n    if (!pipe || !pipe.length) {\n        return {\n            output: input\n        };\n    }\n    let pipeInfo;\n    let issues;\n    let output = input;\n    for (const action of pipe){\n        const result = await action(output);\n        if (result.issue) {\n            pipeInfo = pipeInfo || getPipeInfo(parseInfo, reason);\n            const issue = getIssue(pipeInfo, result.issue);\n            issues ? issues.push(issue) : issues = [\n                issue\n            ];\n            if (pipeInfo.abortEarly || pipeInfo.abortPipeEarly) {\n                break;\n            }\n        } else {\n            output = result.output;\n        }\n    }\n    return issues ? {\n        issues\n    } : {\n        output\n    };\n}\n// src/utils/getDefaultArgs/getDefaultArgs.ts\nfunction getDefaultArgs(arg1, arg2) {\n    return !arg1 || typeof arg1 === \"string\" ? [\n        arg1,\n        arg2\n    ] : [\n        void 0,\n        arg1\n    ];\n}\n// src/utils/getIssues/getIssues.ts\nfunction getIssues(info, reason, validation, message, input, issues) {\n    return {\n        issues: [\n            {\n                reason,\n                validation,\n                origin: info?.origin || \"value\",\n                message,\n                input,\n                issues,\n                abortEarly: info?.abortEarly,\n                abortPipeEarly: info?.abortPipeEarly\n            }\n        ]\n    };\n}\n// src/utils/isLuhnAlgo/isLuhnAlgo.ts\nfunction isLuhnAlgo(input) {\n    const number2 = input.replace(/\\D/g, \"\");\n    let length2 = number2.length;\n    let bit = 1;\n    let sum = 0;\n    while(length2){\n        const value2 = +number2[--length2];\n        bit ^= 1;\n        sum += bit ? [\n            0,\n            2,\n            4,\n            6,\n            8,\n            1,\n            3,\n            5,\n            7,\n            9\n        ][value2] : value2;\n    }\n    return sum % 10 === 0;\n}\n// src/schemas/any/any.ts\nfunction any(pipe = []) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"any\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            return executePipe(input, pipe, info, \"any\");\n        }\n    };\n}\n// src/schemas/any/anyAsync.ts\nfunction anyAsync(pipe = []) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"any\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            return executePipeAsync(input, pipe, info, \"any\");\n        }\n    };\n}\n// src/schemas/array/array.ts\nfunction array(item, arg2, arg3) {\n    const [error, pipe] = getDefaultArgs(arg2, arg3);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"array\",\n        /**\n     * The array item schema.\n     */ array: {\n            item\n        },\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (!Array.isArray(input)) {\n                return getIssues(info, \"type\", \"array\", error || \"Invalid type\", input);\n            }\n            let issues;\n            const output = [];\n            for(let key = 0; key < input.length; key++){\n                const value2 = input[key];\n                const result = item._parse(value2, info);\n                if (result.issues) {\n                    const pathItem = {\n                        schema: \"array\",\n                        input,\n                        key,\n                        value: value2\n                    };\n                    for (const issue of result.issues){\n                        if (issue.path) {\n                            issue.path.unshift(pathItem);\n                        } else {\n                            issue.path = [\n                                pathItem\n                            ];\n                        }\n                        issues?.push(issue);\n                    }\n                    if (!issues) {\n                        issues = result.issues;\n                    }\n                    if (info?.abortEarly) {\n                        break;\n                    }\n                } else {\n                    output.push(result.output);\n                }\n            }\n            return issues ? {\n                issues\n            } : executePipe(output, pipe, info, \"array\");\n        }\n    };\n}\n// src/schemas/array/arrayAsync.ts\nfunction arrayAsync(item, arg2, arg3) {\n    const [error, pipe] = getDefaultArgs(arg2, arg3);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"array\",\n        /**\n     * The array item schema.\n     */ array: {\n            item\n        },\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (!Array.isArray(input)) {\n                return getIssues(info, \"type\", \"array\", error || \"Invalid type\", input);\n            }\n            let issues;\n            const output = [];\n            await Promise.all(input.map(async (value2, key)=>{\n                if (!(info?.abortEarly && issues)) {\n                    const result = await item._parse(value2, info);\n                    if (!(info?.abortEarly && issues)) {\n                        if (result.issues) {\n                            const pathItem = {\n                                schema: \"array\",\n                                input,\n                                key,\n                                value: value2\n                            };\n                            for (const issue of result.issues){\n                                if (issue.path) {\n                                    issue.path.unshift(pathItem);\n                                } else {\n                                    issue.path = [\n                                        pathItem\n                                    ];\n                                }\n                                issues?.push(issue);\n                            }\n                            if (!issues) {\n                                issues = result.issues;\n                            }\n                            if (info?.abortEarly) {\n                                throw null;\n                            }\n                        } else {\n                            output[key] = result.output;\n                        }\n                    }\n                }\n            })).catch(()=>null);\n            return issues ? {\n                issues\n            } : executePipeAsync(output, pipe, info, \"array\");\n        }\n    };\n}\n// src/schemas/bigint/bigint.ts\nfunction bigint(arg1, arg2) {\n    const [error, pipe] = getDefaultArgs(arg1, arg2);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"bigint\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (typeof input !== \"bigint\") {\n                return getIssues(info, \"type\", \"bigint\", error || \"Invalid type\", input);\n            }\n            return executePipe(input, pipe, info, \"bigint\");\n        }\n    };\n}\n// src/schemas/bigint/bigintAsync.ts\nfunction bigintAsync(arg1, arg2) {\n    const [error, pipe] = getDefaultArgs(arg1, arg2);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"bigint\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (typeof input !== \"bigint\") {\n                return getIssues(info, \"type\", \"bigint\", error || \"Invalid type\", input);\n            }\n            return executePipeAsync(input, pipe, info, \"bigint\");\n        }\n    };\n}\n// src/schemas/blob/blob.ts\nfunction blob(arg1, arg2) {\n    const [error, pipe] = getDefaultArgs(arg1, arg2);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"blob\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (!(input instanceof Blob)) {\n                return getIssues(info, \"type\", \"blob\", error || \"Invalid type\", input);\n            }\n            return executePipe(input, pipe, info, \"blob\");\n        }\n    };\n}\n// src/schemas/blob/blobAsync.ts\nfunction blobAsync(arg1, arg2) {\n    const [error, pipe] = getDefaultArgs(arg1, arg2);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"blob\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (!(input instanceof Blob)) {\n                return getIssues(info, \"type\", \"blob\", error || \"Invalid type\", input);\n            }\n            return executePipeAsync(input, pipe, info, \"blob\");\n        }\n    };\n}\n// src/schemas/boolean/boolean.ts\nfunction boolean(arg1, arg2) {\n    const [error, pipe] = getDefaultArgs(arg1, arg2);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"boolean\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (typeof input !== \"boolean\") {\n                return getIssues(info, \"type\", \"boolean\", error || \"Invalid type\", input);\n            }\n            return executePipe(input, pipe, info, \"boolean\");\n        }\n    };\n}\n// src/schemas/boolean/booleanAsync.ts\nfunction booleanAsync(arg1, arg2) {\n    const [error, pipe] = getDefaultArgs(arg1, arg2);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"boolean\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (typeof input !== \"boolean\") {\n                return getIssues(info, \"type\", \"boolean\", error || \"Invalid type\", input);\n            }\n            return executePipeAsync(input, pipe, info, \"boolean\");\n        }\n    };\n}\n// src/schemas/date/date.ts\nfunction date(arg1, arg2) {\n    const [error, pipe] = getDefaultArgs(arg1, arg2);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"date\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (!(input instanceof Date)) {\n                return getIssues(info, \"type\", \"date\", error || \"Invalid type\", input);\n            }\n            return executePipe(input, pipe, info, \"date\");\n        }\n    };\n}\n// src/schemas/date/dateAsync.ts\nfunction dateAsync(arg1, arg2) {\n    const [error, pipe] = getDefaultArgs(arg1, arg2);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"date\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (!(input instanceof Date)) {\n                return getIssues(info, \"type\", \"date\", error || \"Invalid type\", input);\n            }\n            return executePipeAsync(input, pipe, info, \"date\");\n        }\n    };\n}\n// src/schemas/enumType/enumType.ts\nfunction enumType(enumValue, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"enum\",\n        /**\n     * The enum value.\n     */ enum: enumValue,\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (!enumValue.includes(input)) {\n                return getIssues(info, \"type\", \"enum\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/enumType/enumTypeAsync.ts\nfunction enumTypeAsync(enumValue, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"enum\",\n        /**\n     * The enum value.\n     */ enum: enumValue,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (!enumValue.includes(input)) {\n                return getIssues(info, \"type\", \"enum\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/instance/instance.ts\nfunction instance(of, arg2, arg3) {\n    const [error, pipe] = getDefaultArgs(arg2, arg3);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"instance\",\n        /**\n     * The class of the instance.\n     */ class: of,\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (!(input instanceof of)) {\n                return getIssues(info, \"type\", \"instance\", error || \"Invalid type\", input);\n            }\n            return executePipe(input, pipe, info, \"instance\");\n        }\n    };\n}\n// src/schemas/instance/instanceAsync.ts\nfunction instanceAsync(of, arg2, arg3) {\n    const [error, pipe] = getDefaultArgs(arg2, arg3);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"instance\",\n        /**\n     * The class of the instance.\n     */ class: of,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (!(input instanceof of)) {\n                return getIssues(info, \"type\", \"instance\", error || \"Invalid type\", input);\n            }\n            return executePipeAsync(input, pipe, info, \"instance\");\n        }\n    };\n}\n// src/schemas/literal/literal.ts\nfunction literal(literal2, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"literal\",\n        /**\n     * The literal value.\n     */ literal: literal2,\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (input !== literal2) {\n                return getIssues(info, \"type\", \"literal\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/literal/literalAsync.ts\nfunction literalAsync(literal2, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"literal\",\n        /**\n     * The literal value.\n     */ literal: literal2,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (input !== literal2) {\n                return getIssues(info, \"type\", \"literal\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/map/map.ts\nfunction map(key, value2, arg3, arg4) {\n    const [error, pipe] = getDefaultArgs(arg3, arg4);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"map\",\n        /**\n     * The map key and value schema.\n     */ map: {\n            key,\n            value: value2\n        },\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (!(input instanceof Map)) {\n                return getIssues(info, \"type\", \"map\", error || \"Invalid type\", input);\n            }\n            let issues;\n            const output = /* @__PURE__ */ new Map();\n            for (const [inputKey, inputValue] of input.entries()){\n                let pathItem;\n                const keyResult = key._parse(inputKey, {\n                    origin: \"key\",\n                    abortEarly: info?.abortEarly,\n                    abortPipeEarly: info?.abortPipeEarly\n                });\n                if (keyResult.issues) {\n                    pathItem = {\n                        schema: \"map\",\n                        input,\n                        key: inputKey,\n                        value: inputValue\n                    };\n                    for (const issue of keyResult.issues){\n                        if (issue.path) {\n                            issue.path.unshift(pathItem);\n                        } else {\n                            issue.path = [\n                                pathItem\n                            ];\n                        }\n                        issues?.push(issue);\n                    }\n                    if (!issues) {\n                        issues = keyResult.issues;\n                    }\n                    if (info?.abortEarly) {\n                        break;\n                    }\n                }\n                const valueResult = value2._parse(inputValue, info);\n                if (valueResult.issues) {\n                    pathItem = pathItem || {\n                        schema: \"map\",\n                        input,\n                        key: inputKey,\n                        value: inputValue\n                    };\n                    for (const issue of valueResult.issues){\n                        if (issue.path) {\n                            issue.path.unshift(pathItem);\n                        } else {\n                            issue.path = [\n                                pathItem\n                            ];\n                        }\n                        issues?.push(issue);\n                    }\n                    if (!issues) {\n                        issues = valueResult.issues;\n                    }\n                    if (info?.abortEarly) {\n                        break;\n                    }\n                }\n                if (!keyResult.issues && !valueResult.issues) {\n                    output.set(keyResult.output, valueResult.output);\n                }\n            }\n            return issues ? {\n                issues\n            } : executePipe(output, pipe, info, \"map\");\n        }\n    };\n}\n// src/schemas/map/mapAsync.ts\nfunction mapAsync(key, value2, arg3, arg4) {\n    const [error, pipe] = getDefaultArgs(arg3, arg4);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"map\",\n        /**\n     * The map key and value schema.\n     */ map: {\n            key,\n            value: value2\n        },\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (!(input instanceof Map)) {\n                return getIssues(info, \"type\", \"map\", error || \"Invalid type\", input);\n            }\n            const output = /* @__PURE__ */ new Map();\n            let issues;\n            await Promise.all(Array.from(input.entries()).map(async ([inputKey, inputValue])=>{\n                let pathItem;\n                const [keyResult, valueResult] = await Promise.all([\n                    {\n                        schema: key,\n                        value: inputKey,\n                        origin: \"key\"\n                    },\n                    {\n                        schema: value2,\n                        value: inputValue,\n                        origin: \"value\"\n                    }\n                ].map(async ({ schema, value: value3, origin })=>{\n                    if (!(info?.abortEarly && issues)) {\n                        const result = await schema._parse(value3, {\n                            origin,\n                            abortEarly: info?.abortEarly,\n                            abortPipeEarly: info?.abortPipeEarly\n                        });\n                        if (!(info?.abortEarly && issues)) {\n                            if (result.issues) {\n                                pathItem = pathItem || {\n                                    schema: \"map\",\n                                    input,\n                                    key: inputKey,\n                                    value: inputValue\n                                };\n                                for (const issue of result.issues){\n                                    if (issue.path) {\n                                        issue.path.unshift(pathItem);\n                                    } else {\n                                        issue.path = [\n                                            pathItem\n                                        ];\n                                    }\n                                    issues?.push(issue);\n                                }\n                                if (!issues) {\n                                    issues = result.issues;\n                                }\n                                if (info?.abortEarly) {\n                                    throw null;\n                                }\n                            } else {\n                                return result;\n                            }\n                        }\n                    }\n                })).catch(()=>[]);\n                if (keyResult && valueResult) {\n                    output.set(keyResult.output, valueResult.output);\n                }\n            }));\n            return issues ? {\n                issues\n            } : executePipeAsync(input, pipe, info, \"map\");\n        }\n    };\n}\n// src/schemas/nan/nan.ts\nfunction nan(error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"nan\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (!Number.isNaN(input)) {\n                return getIssues(info, \"type\", \"nan\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/nan/nanAsync.ts\nfunction nanAsync(error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"nan\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (!Number.isNaN(input)) {\n                return getIssues(info, \"type\", \"nan\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/nativeEnum/nativeEnum.ts\nfunction nativeEnum(nativeEnum2, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"native_enum\",\n        /**\n     * The native enum value.\n     */ nativeEnum: nativeEnum2,\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (!Object.values(nativeEnum2).includes(input)) {\n                return getIssues(info, \"type\", \"native_enum\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/nativeEnum/nativeEnumAsync.ts\nfunction nativeEnumAsync(nativeEnum2, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"native_enum\",\n        /**\n     * The native enum value.\n     */ nativeEnum: nativeEnum2,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (!Object.values(nativeEnum2).includes(input)) {\n                return getIssues(info, \"type\", \"native_enum\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/never/never.ts\nfunction never(error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"never\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            return getIssues(info, \"type\", \"never\", error || \"Invalid type\", input);\n        }\n    };\n}\n// src/schemas/never/neverAsync.ts\nfunction neverAsync(error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"never\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            return getIssues(info, \"type\", \"never\", error || \"Invalid type\", input);\n        }\n    };\n}\n// src/schemas/nonNullable/nonNullable.ts\nfunction nonNullable(wrapped, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"non_nullable\",\n        /**\n     * The wrapped schema.\n     */ wrapped,\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (input === null) {\n                return getIssues(info, \"type\", \"non_nullable\", error || \"Invalid type\", input);\n            }\n            return wrapped._parse(input, info);\n        }\n    };\n}\n// src/schemas/nonNullable/nonNullableAsync.ts\nfunction nonNullableAsync(wrapped, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"non_nullable\",\n        /**\n     * The wrapped schema.\n     */ wrapped,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (input === null) {\n                return getIssues(info, \"type\", \"non_nullable\", error || \"Invalid type\", input);\n            }\n            return wrapped._parse(input, info);\n        }\n    };\n}\n// src/schemas/nonNullish/nonNullish.ts\nfunction nonNullish(wrapped, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"non_nullish\",\n        /**\n     * The wrapped schema.\n     */ wrapped,\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (input === null || input === void 0) {\n                return getIssues(info, \"type\", \"non_nullish\", error || \"Invalid type\", input);\n            }\n            return wrapped._parse(input, info);\n        }\n    };\n}\n// src/schemas/nonNullish/nonNullishAsync.ts\nfunction nonNullishAsync(wrapped, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"non_nullish\",\n        /**\n     * The wrapped schema.\n     */ wrapped,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (input === null || input === void 0) {\n                return getIssues(info, \"type\", \"non_nullish\", error || \"Invalid type\", input);\n            }\n            return wrapped._parse(input, info);\n        }\n    };\n}\n// src/schemas/nonOptional/nonOptional.ts\nfunction nonOptional(wrapped, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"non_optional\",\n        /**\n     * The wrapped schema.\n     */ wrapped,\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (input === void 0) {\n                return getIssues(info, \"type\", \"non_optional\", error || \"Invalid type\", input);\n            }\n            return wrapped._parse(input, info);\n        }\n    };\n}\n// src/schemas/nonOptional/nonOptionalAsync.ts\nfunction nonOptionalAsync(wrapped, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"non_optional\",\n        /**\n     * The wrapped schema.\n     */ wrapped,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (input === void 0) {\n                return getIssues(info, \"type\", \"non_optional\", error || \"Invalid type\", input);\n            }\n            return wrapped._parse(input, info);\n        }\n    };\n}\n// src/schemas/nullable/nullable.ts\nfunction nullable(wrapped) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"nullable\",\n        /**\n     * The wrapped schema.\n     */ wrapped,\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (input === null) {\n                return {\n                    output: input\n                };\n            }\n            return wrapped._parse(input, info);\n        }\n    };\n}\n// src/schemas/nullable/nullableAsync.ts\nfunction nullableAsync(wrapped) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"nullable\",\n        /**\n     * The wrapped schema.\n     */ wrapped,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (input === null) {\n                return {\n                    output: input\n                };\n            }\n            return wrapped._parse(input, info);\n        }\n    };\n}\n// src/schemas/nullish/nullish.ts\nfunction nullish(wrapped) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"nullish\",\n        /**\n     * The wrapped schema.\n     */ wrapped,\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (input === null || input === void 0) {\n                return {\n                    output: input\n                };\n            }\n            return wrapped._parse(input, info);\n        }\n    };\n}\n// src/schemas/nullish/nullishAsync.ts\nfunction nullishAsync(wrapped) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"nullish\",\n        /**\n     * The wrapped schema.\n     */ wrapped,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (input === null || input === void 0) {\n                return {\n                    output: input\n                };\n            }\n            return wrapped._parse(input, info);\n        }\n    };\n}\n// src/schemas/nullType/nullType.ts\nfunction nullType(error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"null\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (input !== null) {\n                return getIssues(info, \"type\", \"null\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/nullType/nullTypeAsync.ts\nfunction nullTypeAsync(error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"null\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (input !== null) {\n                return getIssues(info, \"type\", \"null\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/number/number.ts\nfunction number(arg1, arg2) {\n    const [error, pipe] = getDefaultArgs(arg1, arg2);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"number\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (typeof input !== \"number\") {\n                return getIssues(info, \"type\", \"number\", error || \"Invalid type\", input);\n            }\n            return executePipe(input, pipe, info, \"number\");\n        }\n    };\n}\n// src/schemas/number/numberAsync.ts\nfunction numberAsync(arg1, arg2) {\n    const [error, pipe] = getDefaultArgs(arg1, arg2);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"number\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (typeof input !== \"number\") {\n                return getIssues(info, \"type\", \"number\", error || \"Invalid type\", input);\n            }\n            return executePipeAsync(input, pipe, info, \"number\");\n        }\n    };\n}\n// src/schemas/object/object.ts\nfunction object(object2, arg2, arg3) {\n    const [error, pipe] = getDefaultArgs(arg2, arg3);\n    let cachedEntries;\n    return {\n        /**\n     * The schema type.\n     */ schema: \"object\",\n        /**\n     * The object schema.\n     */ object: object2,\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (!input || typeof input !== \"object\") {\n                return getIssues(info, \"type\", \"object\", error || \"Invalid type\", input);\n            }\n            cachedEntries = cachedEntries || Object.entries(object2);\n            let issues;\n            const output = {};\n            for (const [key, schema] of cachedEntries){\n                const value2 = input[key];\n                const result = schema._parse(value2, info);\n                if (result.issues) {\n                    const pathItem = {\n                        schema: \"object\",\n                        input,\n                        key,\n                        value: value2\n                    };\n                    for (const issue of result.issues){\n                        if (issue.path) {\n                            issue.path.unshift(pathItem);\n                        } else {\n                            issue.path = [\n                                pathItem\n                            ];\n                        }\n                        issues?.push(issue);\n                    }\n                    if (!issues) {\n                        issues = result.issues;\n                    }\n                    if (info?.abortEarly) {\n                        break;\n                    }\n                } else {\n                    output[key] = result.output;\n                }\n            }\n            return issues ? {\n                issues\n            } : executePipe(output, pipe, info, \"object\");\n        }\n    };\n}\n// src/schemas/object/objectAsync.ts\nfunction objectAsync(object2, arg2, arg3) {\n    const [error, pipe] = getDefaultArgs(arg2, arg3);\n    let cachedEntries;\n    return {\n        /**\n     * The schema type.\n     */ schema: \"object\",\n        /**\n     * The object schema.\n     */ object: object2,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (!input || typeof input !== \"object\") {\n                return getIssues(info, \"type\", \"object\", error || \"Invalid type\", input);\n            }\n            cachedEntries = cachedEntries || Object.entries(object2);\n            let issues;\n            const output = {};\n            await Promise.all(cachedEntries.map(async ([key, schema])=>{\n                if (!(info?.abortEarly && issues)) {\n                    const value2 = input[key];\n                    const result = await schema._parse(value2, info);\n                    if (!(info?.abortEarly && issues)) {\n                        if (result.issues) {\n                            const pathItem = {\n                                schema: \"object\",\n                                input,\n                                key,\n                                value: value2\n                            };\n                            for (const issue of result.issues){\n                                if (issue.path) {\n                                    issue.path.unshift(pathItem);\n                                } else {\n                                    issue.path = [\n                                        pathItem\n                                    ];\n                                }\n                                issues?.push(issue);\n                            }\n                            if (!issues) {\n                                issues = result.issues;\n                            }\n                            if (info?.abortEarly) {\n                                throw null;\n                            }\n                        } else {\n                            output[key] = result.output;\n                        }\n                    }\n                }\n            })).catch(()=>null);\n            return issues ? {\n                issues\n            } : executePipeAsync(output, pipe, info, \"object\");\n        }\n    };\n}\n// src/schemas/optional/optional.ts\nfunction optional(wrapped) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"optional\",\n        /**\n     * The wrapped schema.\n     */ wrapped,\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (input === void 0) {\n                return {\n                    output: input\n                };\n            }\n            return wrapped._parse(input, info);\n        }\n    };\n}\n// src/schemas/optional/optionalAsync.ts\nfunction optionalAsync(wrapped) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"optional\",\n        /**\n     * The wrapped schema.\n     */ wrapped,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (input === void 0) {\n                return {\n                    output: input\n                };\n            }\n            return wrapped._parse(input, info);\n        }\n    };\n}\n// src/schemas/string/string.ts\nfunction string(arg1, arg2) {\n    const [error, pipe] = getDefaultArgs(arg1, arg2);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"string\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (typeof input !== \"string\") {\n                return getIssues(info, \"type\", \"string\", error || \"Invalid type\", input);\n            }\n            return executePipe(input, pipe, info, \"string\");\n        }\n    };\n}\n// src/schemas/string/stringAsync.ts\nfunction stringAsync(arg1, arg2) {\n    const [error, pipe] = getDefaultArgs(arg1, arg2);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"string\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (typeof input !== \"string\") {\n                return getIssues(info, \"type\", \"string\", error || \"Invalid type\", input);\n            }\n            return executePipeAsync(input, pipe, info, \"string\");\n        }\n    };\n}\n// src/schemas/record/utils/getRecordArgs/getRecordArgs.ts\nfunction getRecordArgs(arg1, arg2, arg3, arg4) {\n    if (typeof arg2 === \"object\" && !Array.isArray(arg2)) {\n        const [error2, pipe2] = getDefaultArgs(arg3, arg4);\n        return [\n            arg1,\n            arg2,\n            error2,\n            pipe2\n        ];\n    }\n    const [error, pipe] = getDefaultArgs(arg2, arg3);\n    return [\n        string(),\n        arg1,\n        error,\n        pipe\n    ];\n}\n// src/schemas/record/values.ts\nvar BLOCKED_KEYS = [\n    \"__proto__\",\n    \"prototype\",\n    \"constructor\"\n];\n// src/schemas/record/record.ts\nfunction record(arg1, arg2, arg3, arg4) {\n    const [key, value2, error, pipe] = getRecordArgs(arg1, arg2, arg3, arg4);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"record\",\n        /**\n     * The record key and value schema.\n     */ record: {\n            key,\n            value: value2\n        },\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (!input || typeof input !== \"object\") {\n                return getIssues(info, \"type\", \"record\", error || \"Invalid type\", input);\n            }\n            let issues;\n            const output = {};\n            for (const [inputKey, inputValue] of Object.entries(input)){\n                if (!BLOCKED_KEYS.includes(inputKey)) {\n                    let pathItem;\n                    const keyResult = key._parse(inputKey, {\n                        origin: \"key\",\n                        abortEarly: info?.abortEarly,\n                        abortPipeEarly: info?.abortPipeEarly\n                    });\n                    if (keyResult.issues) {\n                        pathItem = {\n                            schema: \"record\",\n                            input,\n                            key: inputKey,\n                            value: inputValue\n                        };\n                        for (const issue of keyResult.issues){\n                            issue.path = [\n                                pathItem\n                            ];\n                            issues?.push(issue);\n                        }\n                        if (!issues) {\n                            issues = keyResult.issues;\n                        }\n                        if (info?.abortEarly) {\n                            break;\n                        }\n                    }\n                    const valueResult = value2._parse(inputValue, info);\n                    if (valueResult.issues) {\n                        pathItem = pathItem || {\n                            schema: \"record\",\n                            input,\n                            key: inputKey,\n                            value: inputValue\n                        };\n                        for (const issue of valueResult.issues){\n                            if (issue.path) {\n                                issue.path.unshift(pathItem);\n                            } else {\n                                issue.path = [\n                                    pathItem\n                                ];\n                            }\n                            issues?.push(issue);\n                        }\n                        if (!issues) {\n                            issues = valueResult.issues;\n                        }\n                        if (info?.abortEarly) {\n                            break;\n                        }\n                    }\n                    if (!keyResult.issues && !valueResult.issues) {\n                        output[keyResult.output] = valueResult.output;\n                    }\n                }\n            }\n            return issues ? {\n                issues\n            } : executePipe(output, pipe, info, \"record\");\n        }\n    };\n}\n// src/schemas/record/recordAsync.ts\nfunction recordAsync(arg1, arg2, arg3, arg4) {\n    const [key, value2, error, pipe] = getRecordArgs(arg1, arg2, arg3, arg4);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"record\",\n        /**\n     * The record key and value schema.\n     */ record: {\n            key,\n            value: value2\n        },\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (!input || typeof input !== \"object\") {\n                return getIssues(info, \"type\", \"record\", error || \"Invalid type\", input);\n            }\n            let issues;\n            const output = {};\n            await Promise.all(// Note: `Object.entries(...)` converts each key to a string\n            Object.entries(input).map(async ([inputKey, inputValue])=>{\n                if (!BLOCKED_KEYS.includes(inputKey)) {\n                    let pathItem;\n                    const [keyResult, valueResult] = await Promise.all([\n                        {\n                            schema: key,\n                            value: inputKey,\n                            origin: \"key\"\n                        },\n                        {\n                            schema: value2,\n                            value: inputValue,\n                            origin: \"value\"\n                        }\n                    ].map(async ({ schema, value: value3, origin })=>{\n                        if (!(info?.abortEarly && issues)) {\n                            const result = await schema._parse(value3, {\n                                origin,\n                                abortEarly: info?.abortEarly,\n                                abortPipeEarly: info?.abortPipeEarly\n                            });\n                            if (!(info?.abortEarly && issues)) {\n                                if (result.issues) {\n                                    pathItem = pathItem || {\n                                        schema: \"record\",\n                                        input,\n                                        key: inputKey,\n                                        value: inputValue\n                                    };\n                                    for (const issue of result.issues){\n                                        if (issue.path) {\n                                            issue.path.unshift(pathItem);\n                                        } else {\n                                            issue.path = [\n                                                pathItem\n                                            ];\n                                        }\n                                        issues?.push(issue);\n                                    }\n                                    if (!issues) {\n                                        issues = result.issues;\n                                    }\n                                    if (info?.abortEarly) {\n                                        throw null;\n                                    }\n                                } else {\n                                    return result;\n                                }\n                            }\n                        }\n                    })).catch(()=>[]);\n                    if (keyResult && valueResult) {\n                        output[keyResult.output] = valueResult.output;\n                    }\n                }\n            }));\n            return issues ? {\n                issues\n            } : executePipeAsync(output, pipe, info, \"record\");\n        }\n    };\n}\n// src/schemas/recursive/recursive.ts\nfunction recursive(getter) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"recursive\",\n        /**\n     * The schema getter.\n     */ getter,\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            return getter()._parse(input, info);\n        }\n    };\n}\n// src/schemas/recursive/recursiveAsync.ts\nfunction recursiveAsync(getter) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"recursive\",\n        /**\n     * The schema getter.\n     */ getter,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            return getter()._parse(input, info);\n        }\n    };\n}\n// src/schemas/set/set.ts\nfunction set(value2, arg2, arg3) {\n    const [error, pipe] = getDefaultArgs(arg2, arg3);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"set\",\n        /**\n     * The set value schema.\n     */ set: {\n            value: value2\n        },\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (!(input instanceof Set)) {\n                return getIssues(info, \"type\", \"set\", error || \"Invalid type\", input);\n            }\n            let key = 0;\n            let issues;\n            const output = /* @__PURE__ */ new Set();\n            for (const inputValue of input){\n                const result = value2._parse(inputValue, info);\n                if (result.issues) {\n                    const pathItem = {\n                        schema: \"set\",\n                        input,\n                        key,\n                        value: inputValue\n                    };\n                    for (const issue of result.issues){\n                        if (issue.path) {\n                            issue.path.unshift(pathItem);\n                        } else {\n                            issue.path = [\n                                pathItem\n                            ];\n                        }\n                        issues?.push(issue);\n                    }\n                    if (!issues) {\n                        issues = result.issues;\n                    }\n                    if (info?.abortEarly) {\n                        break;\n                    }\n                } else {\n                    output.add(result.output);\n                }\n                key++;\n            }\n            return issues ? {\n                issues\n            } : executePipe(output, pipe, info, \"set\");\n        }\n    };\n}\n// src/schemas/set/setAsync.ts\nfunction setAsync(value2, arg2, arg3) {\n    const [error, pipe] = getDefaultArgs(arg2, arg3);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"set\",\n        /**\n     * The set value schema.\n     */ set: {\n            value: value2\n        },\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (!(input instanceof Set)) {\n                return getIssues(info, \"type\", \"set\", error || \"Invalid type\", input);\n            }\n            let issues;\n            const output = /* @__PURE__ */ new Set();\n            await Promise.all(Array.from(input.values()).map(async (inputValue, key)=>{\n                if (!(info?.abortEarly && issues)) {\n                    const result = await value2._parse(inputValue, info);\n                    if (!(info?.abortEarly && issues)) {\n                        if (result.issues) {\n                            const pathItem = {\n                                schema: \"set\",\n                                input,\n                                key,\n                                value: inputValue\n                            };\n                            for (const issue of result.issues){\n                                if (issue.path) {\n                                    issue.path.unshift(pathItem);\n                                } else {\n                                    issue.path = [\n                                        pathItem\n                                    ];\n                                }\n                                issues?.push(issue);\n                            }\n                            if (!issues) {\n                                issues = result.issues;\n                            }\n                            if (info?.abortEarly) {\n                                throw null;\n                            }\n                        } else {\n                            output.add(result.output);\n                        }\n                    }\n                }\n            })).catch(()=>null);\n            return issues ? {\n                issues\n            } : executePipeAsync(input, pipe, info, \"set\");\n        }\n    };\n}\n// src/schemas/special/special.ts\nfunction special(check, arg2, arg3) {\n    const [error, pipe] = getDefaultArgs(arg2, arg3);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"special\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (!check(input)) {\n                return getIssues(info, \"type\", \"special\", error || \"Invalid type\", input);\n            }\n            return executePipe(input, pipe, info, \"special\");\n        }\n    };\n}\n// src/schemas/special/specialAsync.ts\nfunction specialAsync(check, arg2, arg3) {\n    const [error, pipe] = getDefaultArgs(arg2, arg3);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"special\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (!await check(input)) {\n                return getIssues(info, \"type\", \"special\", error || \"Invalid type\", input);\n            }\n            return executePipeAsync(input, pipe, info, \"special\");\n        }\n    };\n}\n// src/schemas/symbol/symbol.ts\nfunction symbol2(error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"symbol\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (typeof input !== \"symbol\") {\n                return getIssues(info, \"type\", \"symbol\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/symbol/symbolAsync.ts\nfunction symbolAsync(error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"symbol\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (typeof input !== \"symbol\") {\n                return getIssues(info, \"type\", \"symbol\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/tuple/utils/getTupleArgs/getTupleArgs.ts\nfunction getTupleArgs(arg1, arg2, arg3) {\n    if (typeof arg1 === \"object\" && !Array.isArray(arg1)) {\n        const [error2, pipe2] = getDefaultArgs(arg2, arg3);\n        return [\n            arg1,\n            error2,\n            pipe2\n        ];\n    }\n    const [error, pipe] = getDefaultArgs(arg1, arg2);\n    return [\n        void 0,\n        error,\n        pipe\n    ];\n}\n// src/schemas/tuple/tuple.ts\nfunction tuple(items, arg2, arg3, arg4) {\n    const [rest, error, pipe] = getTupleArgs(arg2, arg3, arg4);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"tuple\",\n        /**\n     * The tuple items and rest schema.\n     */ tuple: {\n            items,\n            rest\n        },\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (!Array.isArray(input) || !rest && items.length !== input.length || rest && items.length > input.length) {\n                return getIssues(info, \"type\", \"tuple\", error || \"Invalid type\", input);\n            }\n            let issues;\n            const output = [];\n            for(let key = 0; key < items.length; key++){\n                const value2 = input[key];\n                const result = items[key]._parse(value2, info);\n                if (result.issues) {\n                    const pathItem = {\n                        schema: \"tuple\",\n                        input,\n                        key,\n                        value: value2\n                    };\n                    for (const issue of result.issues){\n                        if (issue.path) {\n                            issue.path.unshift(pathItem);\n                        } else {\n                            issue.path = [\n                                pathItem\n                            ];\n                        }\n                        issues?.push(issue);\n                    }\n                    if (!issues) {\n                        issues = result.issues;\n                    }\n                    if (info?.abortEarly) {\n                        break;\n                    }\n                } else {\n                    output[key] = result.output;\n                }\n            }\n            if (rest) {\n                for(let key = items.length; key < input.length; key++){\n                    const value2 = input[key];\n                    const result = rest._parse(value2, info);\n                    if (result.issues) {\n                        const pathItem = {\n                            schema: \"tuple\",\n                            input,\n                            key,\n                            value: value2\n                        };\n                        for (const issue of result.issues){\n                            if (issue.path) {\n                                issue.path.unshift(pathItem);\n                            } else {\n                                issue.path = [\n                                    pathItem\n                                ];\n                            }\n                            issues?.push(issue);\n                        }\n                        if (!issues) {\n                            issues = result.issues;\n                        }\n                        if (info?.abortEarly) {\n                            break;\n                        }\n                    } else {\n                        output[key] = result.output;\n                    }\n                }\n            }\n            return issues ? {\n                issues\n            } : executePipe(output, pipe, info, \"tuple\");\n        }\n    };\n}\n// src/schemas/tuple/tupleAsync.ts\nfunction tupleAsync(items, arg2, arg3, arg4) {\n    const [rest, error, pipe] = getTupleArgs(arg2, arg3, arg4);\n    return {\n        /**\n     * The schema type.\n     */ schema: \"tuple\",\n        /**\n     * The tuple items and rest schema.\n     */ tuple: {\n            items,\n            rest\n        },\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (!Array.isArray(input) || !rest && items.length !== input.length || rest && items.length > input.length) {\n                return getIssues(info, \"type\", \"tuple\", error || \"Invalid type\", input);\n            }\n            let issues;\n            const output = [];\n            await Promise.all([\n                // Parse schema of each tuple item\n                Promise.all(items.map(async (schema, key)=>{\n                    if (!(info?.abortEarly && issues)) {\n                        const value2 = input[key];\n                        const result = await schema._parse(value2, info);\n                        if (!(info?.abortEarly && issues)) {\n                            if (result.issues) {\n                                const pathItem = {\n                                    schema: \"tuple\",\n                                    input,\n                                    key,\n                                    value: value2\n                                };\n                                for (const issue of result.issues){\n                                    if (issue.path) {\n                                        issue.path.unshift(pathItem);\n                                    } else {\n                                        issue.path = [\n                                            pathItem\n                                        ];\n                                    }\n                                    issues?.push(issue);\n                                }\n                                if (!issues) {\n                                    issues = result.issues;\n                                }\n                                if (info?.abortEarly) {\n                                    throw null;\n                                }\n                            } else {\n                                output[key] = result.output;\n                            }\n                        }\n                    }\n                })),\n                // If necessary parse schema of each rest item\n                rest && Promise.all(input.slice(items.length).map(async (value2, index)=>{\n                    if (!(info?.abortEarly && issues)) {\n                        const key = items.length + index;\n                        const result = await rest._parse(value2, info);\n                        if (!(info?.abortEarly && issues)) {\n                            if (result.issues) {\n                                const pathItem = {\n                                    schema: \"tuple\",\n                                    input,\n                                    key,\n                                    value: value2\n                                };\n                                for (const issue of result.issues){\n                                    if (issue.path) {\n                                        issue.path.unshift(pathItem);\n                                    } else {\n                                        issue.path = [\n                                            pathItem\n                                        ];\n                                    }\n                                    issues?.push(issue);\n                                }\n                                if (!issues) {\n                                    issues = result.issues;\n                                }\n                                if (info?.abortEarly) {\n                                    throw null;\n                                }\n                            } else {\n                                output[key] = result.output;\n                            }\n                        }\n                    }\n                }))\n            ]).catch(()=>null);\n            return issues ? {\n                issues\n            } : executePipeAsync(output, pipe, info, \"tuple\");\n        }\n    };\n}\n// src/schemas/undefinedType/undefinedType.ts\nfunction undefinedType(error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"undefined\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (typeof input !== \"undefined\") {\n                return getIssues(info, \"type\", \"undefined\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/undefinedType/undefinedTypeAsync.ts\nfunction undefinedTypeAsync(error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"undefined\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (typeof input !== \"undefined\") {\n                return getIssues(info, \"type\", \"undefined\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/union/union.ts\nfunction union(union2, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"union\",\n        /**\n     * The union schema.\n     */ union: union2,\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            let issues;\n            let output;\n            for (const schema of union2){\n                const result = schema._parse(input, info);\n                if (result.issues) {\n                    if (issues) {\n                        for (const issue of result.issues){\n                            issues.push(issue);\n                        }\n                    } else {\n                        issues = result.issues;\n                    }\n                } else {\n                    output = [\n                        result.output\n                    ];\n                    break;\n                }\n            }\n            return output ? {\n                output: output[0]\n            } : getIssues(info, \"type\", \"union\", error || \"Invalid type\", input, issues);\n        }\n    };\n}\n// src/schemas/union/unionAsync.ts\nfunction unionAsync(union2, error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"union\",\n        /**\n     * The union schema.\n     */ union: union2,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            let issues;\n            let output;\n            for (const schema of union2){\n                const result = await schema._parse(input, info);\n                if (result.issues) {\n                    if (issues) {\n                        for (const issue of result.issues){\n                            issues.push(issue);\n                        }\n                    } else {\n                        issues = result.issues;\n                    }\n                } else {\n                    output = [\n                        result.output\n                    ];\n                    break;\n                }\n            }\n            return output ? {\n                output: output[0]\n            } : getIssues(info, \"type\", \"union\", error || \"Invalid type\", input, issues);\n        }\n    };\n}\n// src/schemas/unknown/unknown.ts\nfunction unknown(pipe = []) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"unknown\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            return executePipe(input, pipe, info, \"unknown\");\n        }\n    };\n}\n// src/schemas/unknown/unknownAsync.ts\nfunction unknownAsync(pipe = []) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"unknown\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            return executePipeAsync(input, pipe, info, \"unknown\");\n        }\n    };\n}\n// src/schemas/voidType/voidType.ts\nfunction voidType(error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"void\",\n        /**\n     * Whether it's async.\n     */ async: false,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            if (typeof input !== \"undefined\") {\n                return getIssues(info, \"type\", \"void\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/schemas/voidType/voidTypeAsync.ts\nfunction voidTypeAsync(error) {\n    return {\n        /**\n     * The schema type.\n     */ schema: \"void\",\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            if (typeof input !== \"undefined\") {\n                return getIssues(info, \"type\", \"void\", error || \"Invalid type\", input);\n            }\n            return {\n                output: input\n            };\n        }\n    };\n}\n// src/methods/keyof/keyof.ts\nfunction keyof(schema) {\n    return enumType(Object.keys(schema.object));\n}\n// src/methods/merge/merge.ts\nfunction merge(schemas, arg2, arg3) {\n    const [error, pipe] = getDefaultArgs(arg2, arg3);\n    return object(schemas.reduce((object2, schemas2)=>({\n            ...object2,\n            ...schemas2.object\n        }), {}), error, pipe);\n}\n// src/methods/merge/mergeAsync.ts\nfunction mergeAsync(schemas, arg2, arg3) {\n    const [error, pipe] = getDefaultArgs(arg2, arg3);\n    return objectAsync(schemas.reduce((object2, schemas2)=>({\n            ...object2,\n            ...schemas2.object\n        }), {}), error, pipe);\n}\n// src/methods/omit/omit.ts\nfunction omit(schema, keys, arg3, arg4) {\n    const [error, pipe] = getDefaultArgs(arg3, arg4);\n    return object(Object.entries(schema.object).reduce((object2, [key, schema2])=>keys.includes(key) ? object2 : {\n            ...object2,\n            [key]: schema2\n        }, {}), error, pipe);\n}\n// src/methods/omit/omitAsync.ts\nfunction omitAsync(schema, keys, arg3, arg4) {\n    const [error, pipe] = getDefaultArgs(arg3, arg4);\n    return objectAsync(Object.entries(schema.object).reduce((object2, [key, schema2])=>keys.includes(key) ? object2 : {\n            ...object2,\n            [key]: schema2\n        }, {}), error, pipe);\n}\n// src/methods/parse/parse.ts\nfunction parse(schema, input, info) {\n    const result = schema._parse(input, info);\n    if (result.issues) {\n        throw new ValiError(result.issues);\n    }\n    return result.output;\n}\n// src/methods/parse/parseAsync.ts\nasync function parseAsync(schema, input, info) {\n    const result = await schema._parse(input, info);\n    if (result.issues) {\n        throw new ValiError(result.issues);\n    }\n    return result.output;\n}\n// src/methods/partial/partial.ts\nfunction partial(schema, arg3, arg4) {\n    const [error, pipe] = getDefaultArgs(arg3, arg4);\n    return object(Object.entries(schema.object).reduce((object2, [key, schema2])=>({\n            ...object2,\n            [key]: optional(schema2)\n        }), {}), error, // @ts-ignore FIXME: Remove line once bug in TS is fixed\n    pipe);\n}\n// src/methods/partial/partialAsync.ts\nfunction partialAsync(schema, arg3, arg4) {\n    const [error, pipe] = getDefaultArgs(arg3, arg4);\n    return objectAsync(Object.entries(schema.object).reduce((object2, [key, schema2])=>({\n            ...object2,\n            [key]: optionalAsync(schema2)\n        }), {}), error, // @ts-ignore FIXME: Remove line once bug in TS is fixed\n    pipe);\n}\n// src/methods/pick/pick.ts\nfunction pick(schema, keys, arg3, arg4) {\n    const [error, pipe] = getDefaultArgs(arg3, arg4);\n    return object(Object.entries(schema.object).reduce((object2, [key, schema2])=>keys.includes(key) ? {\n            ...object2,\n            [key]: schema2\n        } : object2, {}), error, pipe);\n}\n// src/methods/pick/pickAsync.ts\nfunction pickAsync(schema, keys, arg3, arg4) {\n    const [error, pipe] = getDefaultArgs(arg3, arg4);\n    return objectAsync(Object.entries(schema.object).reduce((object2, [key, schema2])=>keys.includes(key) ? {\n            ...object2,\n            [key]: schema2\n        } : object2, {}), error, pipe);\n}\n// src/methods/required/required.ts\nfunction required(schema, arg3, arg4) {\n    const [error, pipe] = getDefaultArgs(arg3, arg4);\n    return object(Object.entries(schema.object).reduce((object2, [key, schema2])=>({\n            ...object2,\n            [key]: nonOptional(schema2)\n        }), {}), error, // @ts-ignore FIXME: Remove line once bug in TS is fixed\n    pipe);\n}\n// src/methods/required/requiredAsync.ts\nfunction requiredAsync(schema, arg3, arg4) {\n    const [error, pipe] = getDefaultArgs(arg3, arg4);\n    return objectAsync(Object.entries(schema.object).reduce((object2, [key, schema2])=>({\n            ...object2,\n            [key]: nonOptionalAsync(schema2)\n        }), {}), error, // @ts-ignore FIXME: Remove line once bug in TS is fixed\n    pipe);\n}\n// src/methods/safeParse/safeParse.ts\nfunction safeParse(schema, input, info) {\n    const result = schema._parse(input, info);\n    return result.issues ? {\n        success: false,\n        error: new ValiError(result.issues),\n        issues: result.issues\n    } : {\n        success: true,\n        data: result.output,\n        output: result.output\n    };\n}\n// src/methods/safeParse/safeParseAsync.ts\nasync function safeParseAsync(schema, input, info) {\n    const result = await schema._parse(input, info);\n    return result.issues ? {\n        success: false,\n        error: new ValiError(result.issues),\n        issues: result.issues\n    } : {\n        success: true,\n        data: result.output,\n        output: result.output\n    };\n}\n// src/methods/strict/strict.ts\nfunction strict(schema, error) {\n    return {\n        ...schema,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            const result = schema._parse(input, info);\n            return !result.issues && // Check length of input and output keys\n            Object.keys(input).length !== Object.keys(result.output).length ? getIssues(info, \"object\", \"strict\", error || \"Invalid keys\", input) : result;\n        }\n    };\n}\n// src/methods/strict/strictAsync.ts\nfunction strictAsync(schema, error) {\n    return {\n        ...schema,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            const result = await schema._parse(input, info);\n            return !result.issues && // Check length of input and output keys\n            Object.keys(input).length !== Object.keys(result.output).length ? getIssues(info, \"object\", \"strict\", error || \"Invalid keys\", input) : result;\n        }\n    };\n}\n// src/methods/transform/transform.ts\nfunction transform(schema, action) {\n    return {\n        ...schema,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            const result = schema._parse(input, info);\n            return result.issues ? result : {\n                output: action(result.output)\n            };\n        }\n    };\n}\n// src/methods/transform/transformAsync.ts\nfunction transformAsync(schema, action) {\n    return {\n        ...schema,\n        /**\n     * Whether it's async.\n     */ async: true,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ async _parse (input, info) {\n            const result = await schema._parse(input, info);\n            return result.issues ? result : {\n                output: await action(result.output)\n            };\n        }\n    };\n}\n// src/methods/unwrap/unwrap.ts\nfunction unwrap(schema) {\n    return schema.wrapped;\n}\n// src/methods/withDefault/withDefault.ts\nfunction withDefault(schema, value2) {\n    return {\n        ...schema,\n        /**\n     * Parses unknown input based on its schema.\n     *\n     * @param input The input to be parsed.\n     * @param info The parse info.\n     *\n     * @returns The parsed output.\n     */ _parse (input, info) {\n            return schema._parse(input === void 0 ? typeof value2 === \"function\" ? value2() : value2 : input, info);\n        }\n    };\n}\nvar useDefault = withDefault;\n// src/transformations/toCustom/toCustom.ts\nfunction toCustom(action) {\n    return (input)=>({\n            output: action(input)\n        });\n}\n// src/transformations/toCustom/toCustomAsync.ts\nfunction toCustomAsync(action) {\n    return async (input)=>({\n            output: await action(input)\n        });\n}\n// src/transformations/toLowerCase/toLowerCase.ts\nfunction toLowerCase() {\n    return (input)=>({\n            output: input.toLocaleLowerCase()\n        });\n}\n// src/transformations/toMaxValue/toMaxValue.ts\nfunction toMaxValue(requirement) {\n    return (input)=>({\n            output: input > requirement ? requirement : input\n        });\n}\n// src/transformations/toMinValue/toMinValue.ts\nfunction toMinValue(requirement) {\n    return (input)=>({\n            output: input < requirement ? requirement : input\n        });\n}\n// src/transformations/toTrimmed/toTrimmed.ts\nfunction toTrimmed() {\n    return (input)=>({\n            output: input.trim()\n        });\n}\n// src/transformations/toTrimmedEnd/toTrimmedEnd.ts\nfunction toTrimmedEnd() {\n    return (input)=>({\n            output: input.trimEnd()\n        });\n}\n// src/transformations/toTrimmedStart/toTrimmedStart.ts\nfunction toTrimmedStart() {\n    return (input)=>({\n            output: input.trimStart()\n        });\n}\n// src/transformations/toUpperCase/toUpperCase.ts\nfunction toUpperCase() {\n    return (input)=>({\n            output: input.toUpperCase()\n        });\n}\n// src/validations/bytes/bytes.ts\nfunction bytes(requirement, error) {\n    return (input)=>{\n        if (new TextEncoder().encode(input).length !== requirement) {\n            return {\n                issue: {\n                    validation: \"bytes\",\n                    message: error || \"Invalid byte length\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/custom/custom.ts\nfunction custom(requirement, error) {\n    return (input)=>{\n        if (!requirement(input)) {\n            return {\n                issue: {\n                    validation: \"custom\",\n                    message: error || \"Invalid input\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/custom/customAsync.ts\nfunction customAsync(requirement, error) {\n    return async (input)=>{\n        if (!await requirement(input)) {\n            return {\n                issue: {\n                    validation: \"custom\",\n                    message: error || \"Invalid input\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/email/email.ts\nfunction email(error) {\n    return (input)=>{\n        if (!/^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i.test(input)) {\n            return {\n                issue: {\n                    validation: \"email\",\n                    message: error || \"Invalid email\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/emoji/emoji.ts\nfunction emoji(error) {\n    return (input)=>{\n        if (!/^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$/u.test(input)) {\n            return {\n                issue: {\n                    validation: \"emoji\",\n                    message: error || \"Invalid emoji\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/endsWith/endsWith.ts\nfunction endsWith(requirement, error) {\n    return (input)=>{\n        if (!input.endsWith(requirement)) {\n            return {\n                issue: {\n                    validation: \"ends_with\",\n                    message: error || \"Invalid end\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/equal/equal.ts\nfunction equal(requirement, error) {\n    return (input)=>{\n        if (input !== requirement) {\n            return {\n                issue: {\n                    validation: \"equal\",\n                    message: error || \"Invalid input\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/excludes/excludes.ts\nfunction excludes(requirement, error) {\n    return (input)=>{\n        if (input.includes(requirement)) {\n            return {\n                issue: {\n                    validation: \"excludes\",\n                    message: error || \"Invalid content\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/finite/finite.ts\nfunction finite(error) {\n    return (input)=>{\n        if (!Number.isFinite(input)) {\n            return {\n                issue: {\n                    validation: \"finite\",\n                    message: error || \"Invalid finite number\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/imei/imei.ts\nfunction imei(error) {\n    return (input)=>{\n        if (!/^\\d{2}[ |/|-]?\\d{6}[ |/|-]?\\d{6}[ |/|-]?\\d$/.test(input) || !isLuhnAlgo(input)) {\n            return {\n                issue: {\n                    validation: \"imei\",\n                    message: error || \"Invalid IMEI\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/includes/includes.ts\nfunction includes(requirement, error) {\n    return (input)=>{\n        if (!input.includes(requirement)) {\n            return {\n                issue: {\n                    validation: \"includes\",\n                    message: error || \"Invalid content\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/integer/integer.ts\nfunction integer(error) {\n    return (input)=>{\n        if (!Number.isInteger(input)) {\n            return {\n                issue: {\n                    validation: \"integer\",\n                    message: error || \"Invalid integer\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/ip/ip.ts\nfunction ip(error) {\n    return (input)=>{\n        if (!/^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$/.test(input) && !/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test(input)) {\n            return {\n                issue: {\n                    validation: \"ip\",\n                    message: error || \"Invalid IP\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/ipv4/ipv4.ts\nfunction ipv4(error) {\n    return (input)=>{\n        if (!/^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$/.test(input)) {\n            return {\n                issue: {\n                    validation: \"ipv4\",\n                    message: error || \"Invalid IP v4\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/ipv6/ipv6.ts\nfunction ipv6(error) {\n    return (input)=>{\n        if (!/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test(input)) {\n            return {\n                issue: {\n                    validation: \"ipv6\",\n                    message: error || \"Invalid IP v6\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/isoDate/isoDate.ts\nfunction isoDate(error) {\n    return (input)=>{\n        if (!/^\\d{4}-(0[1-9]|1[0-2])-([12]\\d|0[1-9]|3[01])$/.test(input)) {\n            return {\n                issue: {\n                    validation: \"iso_date\",\n                    message: error || \"Invalid date\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/isoDateTime/isoDateTime.ts\nfunction isoDateTime(error) {\n    return (input)=>{\n        if (!/^\\d{4}-(0[1-9]|1[0-2])-([12]\\d|0[1-9]|3[01])T(0[0-9]|1\\d|2[0-3]):[0-5]\\d$/.test(input)) {\n            return {\n                issue: {\n                    validation: \"iso_date_time\",\n                    message: error || \"Invalid datetime\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/isoTime/isoTime.ts\nfunction isoTime(error) {\n    return (input)=>{\n        if (!/^(0[0-9]|1\\d|2[0-3]):[0-5]\\d$/.test(input)) {\n            return {\n                issue: {\n                    validation: \"iso_time\",\n                    message: error || \"Invalid time\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/isoTimeSecond/isoTimeSecond.ts\nfunction isoTimeSecond(error) {\n    return (input)=>{\n        if (!/^(0[0-9]|1\\d|2[0-3]):[0-5]\\d:[0-5]\\d$/.test(input)) {\n            return {\n                issue: {\n                    validation: \"iso_time_second\",\n                    message: error || \"Invalid time\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/isoTimestamp/isoTimestamp.ts\nfunction isoTimestamp(error) {\n    return (input)=>{\n        if (!/^\\d{4}-(0[1-9]|1[0-2])-([12]\\d|0[1-9]|3[01])T(0[0-9]|1\\d|2[0-3]):[0-5]\\d:[0-5]\\d\\.\\d{3}Z$/.test(input)) {\n            return {\n                issue: {\n                    validation: \"iso_timestamp\",\n                    message: error || \"Invalid timestamp\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/isoWeek/isoWeek.ts\nfunction isoWeek(error) {\n    return (input)=>{\n        if (!/^\\d{4}-W(0[1-9]|[1-4]\\d|5[0-3])$/.test(input)) {\n            return {\n                issue: {\n                    validation: \"iso_week\",\n                    message: error || \"Invalid week\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/length/length.ts\nfunction length(requirement, error) {\n    return (input)=>{\n        if (input.length !== requirement) {\n            return {\n                issue: {\n                    validation: \"length\",\n                    message: error || \"Invalid length\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/maxBytes/maxBytes.ts\nfunction maxBytes(requirement, error) {\n    return (input)=>{\n        if (new TextEncoder().encode(input).length > requirement) {\n            return {\n                issue: {\n                    validation: \"max_bytes\",\n                    message: error || \"Invalid byte length\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/maxLength/maxLength.ts\nfunction maxLength(requirement, error) {\n    return (input)=>{\n        if (input.length > requirement) {\n            return {\n                issue: {\n                    validation: \"max_length\",\n                    message: error || \"Invalid length\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/maxSize/maxSize.ts\nfunction maxSize(requirement, error) {\n    return (input)=>{\n        if (input.size > requirement) {\n            return {\n                issue: {\n                    validation: \"max_size\",\n                    message: error || \"Invalid size\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/maxValue/maxValue.ts\nfunction maxValue(requirement, error) {\n    return (input)=>{\n        if (input > requirement) {\n            return {\n                issue: {\n                    validation: \"max_value\",\n                    message: error || \"Invalid value\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\nvar maxRange = maxValue;\n// src/validations/minBytes/minBytes.ts\nfunction minBytes(requirement, error) {\n    return (input)=>{\n        if (new TextEncoder().encode(input).length < requirement) {\n            return {\n                issue: {\n                    validation: \"min_bytes\",\n                    message: error || \"Invalid byte length\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/mimeType/mimeType.ts\nfunction mimeType(requirement, error) {\n    return (input)=>{\n        if (!requirement.includes(input.type)) {\n            return {\n                issue: {\n                    validation: \"mime_type\",\n                    message: error || \"Invalid MIME type\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/minLength/minLength.ts\nfunction minLength(requirement, error) {\n    return (input)=>{\n        if (input.length < requirement) {\n            return {\n                issue: {\n                    validation: \"min_length\",\n                    message: error || \"Invalid length\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/minSize/minSize.ts\nfunction minSize(requirement, error) {\n    return (input)=>{\n        if (input.size < requirement) {\n            return {\n                issue: {\n                    validation: \"min_size\",\n                    message: error || \"Invalid size\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/minValue/minValue.ts\nfunction minValue(requirement, error) {\n    return (input)=>{\n        if (input < requirement) {\n            return {\n                issue: {\n                    validation: \"min_value\",\n                    message: error || \"Invalid value\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\nvar minRange = minValue;\n// src/validations/multipleOf/multipleOf.ts\nfunction multipleOf(requirement, error) {\n    return (input)=>{\n        if (input % requirement !== 0) {\n            return {\n                issue: {\n                    validation: \"multipleOf\",\n                    message: error || \"Invalid multiple\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/regex/regex.ts\nfunction regex(requirement, error) {\n    return (input)=>{\n        if (!requirement.test(input)) {\n            return {\n                issue: {\n                    validation: \"regex\",\n                    message: error || \"Invalid regex\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/safeInteger/safeInteger.ts\nfunction safeInteger(error) {\n    return (input)=>{\n        if (!Number.isSafeInteger(input)) {\n            return {\n                issue: {\n                    validation: \"safe_integer\",\n                    message: error || \"Invalid safe integer\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/size/size.ts\nfunction size(requirement, error) {\n    return (input)=>{\n        if (input.size !== requirement) {\n            return {\n                issue: {\n                    validation: \"size\",\n                    message: error || \"Invalid size\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/startsWith/startsWith.ts\nfunction startsWith(requirement, error) {\n    return (input)=>{\n        if (!input.startsWith(requirement)) {\n            return {\n                issue: {\n                    validation: \"starts_with\",\n                    message: error || \"Invalid start\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/url/url.ts\nfunction url(error) {\n    return (input)=>{\n        try {\n            new URL(input);\n            return {\n                output: input\n            };\n        } catch (_) {\n            return {\n                issue: {\n                    validation: \"url\",\n                    message: error || \"Invalid URL\",\n                    input\n                }\n            };\n        }\n    };\n}\n// src/validations/uuid/uuid.ts\nfunction uuid(error) {\n    return (input)=>{\n        if (!/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(input)) {\n            return {\n                issue: {\n                    validation: \"uuid\",\n                    message: error || \"Invalid UUID\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n// src/validations/value/value.ts\nfunction value(requirement, error) {\n    return (input)=>{\n        if (input !== requirement) {\n            return {\n                issue: {\n                    validation: \"value\",\n                    message: error || \"Invalid value\",\n                    input\n                }\n            };\n        }\n        return {\n            output: input\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/valibot/dist/index.js\n");

/***/ })

};
;