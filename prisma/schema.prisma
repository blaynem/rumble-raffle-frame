datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DB_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

model Earnings {
    player         String @id @db.VarChar(45) // evm compatible address
    today_earnings BigInt @default(0)

    // Define relations
    User Users @relation(fields: [player], references: [id])
}

/// Suggested Activities that may be added to the database after approval.
model SuggestedActivities {
    id                String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    description       String
    amountOfPlayers   Int
    activityLoser     Int[]
    killCounts        Decimal[]
    created_at        DateTime    @default(dbgenerated("now()"))
    environment       Environment
    activityWinner    Int[]
    /// Must be true if it is either a custom activity, or is linked to a guild_id
    is_custom         Boolean     @default(false)
    /// The custom activity creators Discord Id, or public address.
    custom_created_by String?
    /// The guilds id that this activity belongs to
    guild_id          String?
    /// If approved, this entry should be migrated to the Activites model.
    approved          Boolean     @default(false)
    /// If true, only suitable for 'mature' users. 
    /// This is generally only going to be used for 'graphic' material.
    /// Default: true
    mature_users_only Boolean     @default(true)
}

model Activities {
    id                String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    description       String
    amountOfPlayers   Int
    activityLoser     Int[]
    killCounts        Decimal[]
    created_at        DateTime    @default(dbgenerated("now()"))
    environment       Environment
    activityWinner    Int[]
    /// Must be true if it is either a custom activity, or is linked to a guild_id
    is_custom         Boolean     @default(false)
    /// The custom activity creators Discord Id, or public address.
    custom_created_by String?
    /// The guilds id that this activity belongs to
    guild_id          String?
    /// If true, only suitable for 'mature' users. Default: false.
    mature_users_only Boolean     @default(false)

    // Opposite Relations
    GameLogs GameRoundLogs[]
}

model Contracts {
    contract_address String   @id @db.VarChar(45) //evm compatible address 
    chain_id         Int
    created_at       DateTime @default(dbgenerated("now()"))
    updated_at       DateTime @default(dbgenerated("now()")) @updatedAt
    name             String
    symbol           String
    decimals         Int
    network_name     String

    // Opposite Relations
    roomParams RoomParams[]
    Payouts    Payouts[]
}

model GameRoundLogs {
    id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    round_counter     Int
    players_remaining Int
    activity_order    Int
    created_at        DateTime @default(dbgenerated("now()"))
    participants      String[]
    // Has Relations
    activity_id       String   @db.Uuid
    room_params_id    String   @db.Uuid

    // Define Relations
    Activity   Activities @relation(fields: [activity_id], references: [id])
    RoomParams RoomParams @relation(fields: [room_params_id], references: [id])
}

model Payouts {
    id                       String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    payment_reason           PaymentReason
    public_address           String        @db.VarChar(45) //evm compatible address 
    payment_amount           Decimal       @db.Decimal(10, 2)
    notes                    String
    created_at               DateTime      @default(dbgenerated("now()"))
    payment_completed        Boolean       @default(false)
    payment_completed_at     DateTime?     @updatedAt
    payment_transaction_hash String?
    // Has Relations
    room_params_id           String        @db.Uuid
    payment_contract_id      String        @db.VarChar(45)

    // Define Relations
    RoomParams      RoomParams @relation(fields: [room_params_id], references: [id])
    PaymentContract Contracts  @relation(fields: [payment_contract_id], references: [contract_address])
}

model Players {
    slug           String   @db.VarChar()
    time_joined    DateTime @default(dbgenerated("now()"))
    // Has Relations
    room_params_id String   @db.Uuid /// Is actually the room_params id, not rooms.
    player         String   @db.VarChar(45) // evm compatible address

    // Define Relations
    RoomParams RoomParams @relation(fields: [room_params_id], references: [id])
    User       Users      @relation(fields: [player], references: [id])

    @@id([room_params_id, player])
    @@unique([room_params_id, player])
}

model RoomParams {
    id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    pve_chance     Int
    revive_chance  Int
    created_at     DateTime  @default(dbgenerated("now()"))
    updated_at     DateTime  @default(dbgenerated("now()")) @updatedAt
    game_started   Boolean?  @default(false)
    game_completed Boolean?  @default(false)
    completed_at   DateTime?
    winners        String[]
    room_slug      String    @db.VarChar(100)
    // Has Relations
    created_by     String?   @db.VarChar(45) // evm compatible address
    contract_id    String    @db.VarChar(45)

    // Define Relations
    Creator  Users?    @relation(fields: [created_by], references: [id])
    Contract Contracts @relation(fields: [contract_id], references: [contract_address])

    // Opposite Relation
    RoomsCurrent Rooms[]         @relation("CurrentParams")
    RoomsPrev    Rooms[]         @relation("PrevParams")
    Payouts      Payouts[]
    Players      Players[]
    GameLogs     GameRoundLogs[]
}

model Rooms {
    id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    created_at DateTime @default(dbgenerated("now()"))
    updated_at DateTime @default(dbgenerated("now()")) @updatedAt
    slug       String   @unique @db.VarChar(100)

    // Has Relations
    params_id           String  @db.Uuid
    /// The params id used for the last game.
    last_game_params_id String? @db.Uuid

    // Define Relations
    Params     RoomParams  @relation("CurrentParams", fields: [params_id], references: [id])
    PrevParams RoomParams? @relation("PrevParams", fields: [last_game_params_id], references: [id])
}

model Users {
    /// Users public address
    id           String   @id @unique @db.VarChar(45) // evm compatible address
    name         String   @db.VarChar(200)
    is_admin     Boolean  @default(false) @db.Boolean
    created_at   DateTime @default(dbgenerated("now()"))
    updated_at   DateTime @default(dbgenerated("now()")) @updatedAt
    farcaster_id String?  @db.VarChar(18)

    // Opposite Relations
    RoomParams RoomParams[]
    Players    Players[]
    Earnings   Earnings[]
}

enum PaymentReason {
    winner
    second
    third
    kills
    alt_split
    creator_split
}

enum Environment {
    PVP
    PVE
    REVIVE
}
